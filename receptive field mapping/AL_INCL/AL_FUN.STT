//##########################################################################################################
int GetRewNum_Pascoe_Gratc(pint RewPulseNum)
{
    int randomnumber;

    randomnumber = random(1,101);
	if (NumHits<450)
	{
    		if      ((randomnumber>=1) && (randomnumber<=30)){*RewPulseNum = 1;} 
    		else if ((randomnumber>=31) && (randomnumber<=60)){*RewPulseNum = 2;}    
    		else if ((randomnumber>=61) && (randomnumber<=95)){*RewPulseNum = 3;}    
                else if ((randomnumber>=96) && (randomnumber<=100)){*RewPulseNum = 4;}
	}
	else if (( NumHits>=450 ) && (NumHits<900))
	{
                if      ((randomnumber>=1) && (randomnumber<=20)){*RewPulseNum = 1;} 
                else if ((randomnumber>=21) && (randomnumber<=40)){*RewPulseNum = 2;}    
                else if ((randomnumber>=41) && (randomnumber<=70)){*RewPulseNum = 4;}    
                else if ((randomnumber>=71) && (randomnumber<=100)){*RewPulseNum = 5;}
	}
	
	
	else if (NumHits>=900)
		{
                        if      ((randomnumber>=1) && (randomnumber<=20)){*RewPulseNum = 1;} 
                        else if ((randomnumber>=21) && (randomnumber<=40)){*RewPulseNum = 4;}    
                        else if ((randomnumber>=41) && (randomnumber<=70)){*RewPulseNum = 5;}    
                        else if ((randomnumber>=71) && (randomnumber<=100)){*RewPulseNum = 7;}
		}


    return *RewPulseNum;
}



int GetRewNum_STARSKY_Setup_1(pint RewPulseNum)
{
    int randomnumber;

    randomnumber = random(1,101);
	if (NumHits<600)
	{
    		if      ((randomnumber>=1) && (randomnumber<=30)){*RewPulseNum = 1;} 
    		else if ((randomnumber>=31) && (randomnumber<=70)){*RewPulseNum = 2;}    
    		else if ((randomnumber>=71) && (randomnumber<=95)){*RewPulseNum = 3;}    
    		else if ((randomnumber>=96) && (randomnumber<=100)){*RewPulseNum = 4;}
	}
	else if (NumHits>=600)
	{
    		if      ((randomnumber>=1) && (randomnumber<=10)){*RewPulseNum = 3;} 
    		else if ((randomnumber>=11) && (randomnumber<=40)){*RewPulseNum = 4;}    
    		else if ((randomnumber>=41) && (randomnumber<=70)){*RewPulseNum = 5;}    
    		else if ((randomnumber>=71) && (randomnumber<=100)){*RewPulseNum = 8;}
	}

    return *RewPulseNum;
}

int GetRewParam_STARSKY(pint RewPulseNum, pint RewPulseTime)
{
    int randomnumber;

        if (NumHits<=100){*RewPulseTime = 40;}
        else if ((NumHits>100)&&(NumHits<=200)){*RewPulseTime = 40;}
        else if ((NumHits>200)&&(NumHits<=300)){*RewPulseTime = 40;}
        else if ((NumHits>300)&&(NumHits<=400)){*RewPulseTime = 40;}
        else if ((NumHits>400)&&(NumHits<=500)){*RewPulseTime = 80;}
        else if ((NumHits>500)&&(NumHits<=600)){*RewPulseTime = 80;}
        else if ((NumHits>600)&&(NumHits<=700)){*RewPulseTime = 80;}
        else if ((NumHits>700)&&(NumHits<=800)){*RewPulseTime = 100;}
        else if ((NumHits>800)&&(NumHits<=900)){*RewPulseTime = 100;}
        else if ((NumHits>900)&&(NumHits<=1000)){*RewPulseTime = 100;}
	else if ((NumHits>1000)&&(NumHits<=1200)){*RewPulseTime = 100;}
	else if ((NumHits>1200)&&(NumHits<=1500)){*RewPulseTime = 100;}
	else {*RewPulseTime = 150;}

    randomnumber = random(1,101);
    if      ((randomnumber>=1) && (randomnumber<=30)){*RewPulseNum = 1;} 
    else if ((randomnumber>=31) && (randomnumber<=60)){*RewPulseNum = 2;}    
    else if ((randomnumber>=61) && (randomnumber<=90)){*RewPulseNum = 4;}    
    else if ((randomnumber>=91) && (randomnumber<=100)){*RewPulseNum = 6;}

    return *RewPulseNum;
}
int GetRewParam_STARSKY_2(pint RewPulseNum, pint RewPulseTime)
{
    int randomnumber;

        if (NumHits<=100){*RewPulseTime = 30;}
        else if ((NumHits>100)&&(NumHits<=200)){*RewPulseTime = 30;}
        else if ((NumHits>200)&&(NumHits<=300)){*RewPulseTime = 30;}
        else if ((NumHits>300)&&(NumHits<=400)){*RewPulseTime = 30;}
        else if ((NumHits>400)&&(NumHits<=500)){*RewPulseTime = 30;}
        else if ((NumHits>500)&&(NumHits<=600)){*RewPulseTime = 50;}
        else if ((NumHits>600)&&(NumHits<=700)){*RewPulseTime = 50;}
        else if ((NumHits>700)&&(NumHits<=800)){*RewPulseTime = 50;}
        else if ((NumHits>800)&&(NumHits<=900)){*RewPulseTime = 50;}
        else if ((NumHits>900)&&(NumHits<=1000)){*RewPulseTime = 50;}
        else if ((NumHits>1000)&&(NumHits<=1200)){*RewPulseTime = 80;}
        else if ((NumHits>1200)&&(NumHits<=1500)){*RewPulseTime = 80;}
	else {*RewPulseTime = 150;}

    randomnumber = random(1,101);
    if      ((randomnumber>=1) && (randomnumber<=30)){*RewPulseNum = 1;} 
    else if ((randomnumber>=31) && (randomnumber<=60)){*RewPulseNum = 2;}    
    else if ((randomnumber>=61) && (randomnumber<=90)){*RewPulseNum = 4;}    
    else if ((randomnumber>=91) && (randomnumber<=100)){*RewPulseNum = 6;}

    return *RewPulseNum;
}

int GetRewTime_STARSKY(pint RewPulseTime)
{
        if (NumHits<=100){*RewPulseTime = 60;}
        else if ((NumHits>100)&&(NumHits<=200)){*RewPulseTime = 60;}
        else if ((NumHits>200)&&(NumHits<=300)){*RewPulseTime = 60;}
        else if ((NumHits>300)&&(NumHits<=400)){*RewPulseTime = 80;}
        else if ((NumHits>400)&&(NumHits<=500)){*RewPulseTime = 80;}
        else if ((NumHits>500)&&(NumHits<=600)){*RewPulseTime = 80;}
        else if ((NumHits>600)&&(NumHits<=700)){*RewPulseTime = 100;}
        else if ((NumHits>700)&&(NumHits<=800)){*RewPulseTime = 100;}
        else if ((NumHits>800)&&(NumHits<=900)){*RewPulseTime = 100;}
        else if ((NumHits>900)&&(NumHits<=1000)){*RewPulseTime = 100;}
	else if ((NumHits>1000)&&(NumHits<=1200)){*RewPulseTime = 100;}
	else if ((NumHits>1200)&&(NumHits<=1500)){*RewPulseTime = 100;}
	else {*RewPulseTime = 150;}
	return *RewPulseTime;
}

int GetRewTime_STARSKY_Setup3(pint RewPulseTime)
{
        if (NumHits<=100){*RewPulseTime = 30;}
        else if ((NumHits>100)&&(NumHits<=200)){*RewPulseTime = 30;}
        else if ((NumHits>200)&&(NumHits<=300)){*RewPulseTime = 30;}
        else if ((NumHits>300)&&(NumHits<=400)){*RewPulseTime = 30;}
        else if ((NumHits>400)&&(NumHits<=500)){*RewPulseTime = 30;}
        else if ((NumHits>500)&&(NumHits<=600)){*RewPulseTime = 40;}
        else if ((NumHits>600)&&(NumHits<=700)){*RewPulseTime = 40;}
        else if ((NumHits>700)&&(NumHits<=800)){*RewPulseTime = 40;}
        else if ((NumHits>800)&&(NumHits<=900)){*RewPulseTime = 40;}
        else if ((NumHits>900)&&(NumHits<=1000)){*RewPulseTime = 60;}
        else if ((NumHits>1000)&&(NumHits<=1200)){*RewPulseTime = 60;}
        else if ((NumHits>1200)&&(NumHits<=1500)){*RewPulseTime = 80;}
        else {*RewPulseTime = 80;}
	return *RewPulseTime;
}
int GetRewTime_STARSKY_Setup3_ii(pint RewPulseTime)
{
        if (NumHits<=100){*RewPulseTime = 60;}
        else if ((NumHits>100)&&(NumHits<=200)){*RewPulseTime = 60;}
        else if ((NumHits>200)&&(NumHits<=300)){*RewPulseTime = 60;}
        else if ((NumHits>300)&&(NumHits<=400)){*RewPulseTime = 60;}
        else if ((NumHits>400)&&(NumHits<=500)){*RewPulseTime = 60;}
        else if ((NumHits>500)&&(NumHits<=600)){*RewPulseTime = 60;}
        else if ((NumHits>600)&&(NumHits<=700)){*RewPulseTime = 60;}
        else if ((NumHits>700)&&(NumHits<=800)){*RewPulseTime = 60;}
        else if ((NumHits>800)&&(NumHits<=900)){*RewPulseTime = 60;}
        else if ((NumHits>900)&&(NumHits<=1000)){*RewPulseTime = 60;}
        else if ((NumHits>1000)&&(NumHits<=1200)){*RewPulseTime = 60;}
        else if ((NumHits>1200)&&(NumHits<=1500)){*RewPulseTime = 60;}
        else {*RewPulseTime = 80;}
	return *RewPulseTime;
}

int GetRewParam_STARSKY_RT(pint RewPulseNum, pint RewPulseTime,int RT)
{
        if (NumHits<=100){*RewPulseTime = 30;}
        else if ((NumHits>100)&&(NumHits<=200)){*RewPulseTime = 30;}
        else if ((NumHits>200)&&(NumHits<=300)){*RewPulseTime = 30;}
        else if ((NumHits>300)&&(NumHits<=400)){*RewPulseTime = 30;}
        else if ((NumHits>400)&&(NumHits<=500)){*RewPulseTime = 30;}
        else if ((NumHits>500)&&(NumHits<=600)){*RewPulseTime = 50;}
        else if ((NumHits>600)&&(NumHits<=700)){*RewPulseTime = 50;}
        else if ((NumHits>700)&&(NumHits<=800)){*RewPulseTime = 70;}
        else if ((NumHits>800)&&(NumHits<=900)){*RewPulseTime = 70;}
        else if ((NumHits>900)&&(NumHits<=1000)){*RewPulseTime = 70;}
	else if ((NumHits>1000)&&(NumHits<=1200)){*RewPulseTime = 100;}
	else if ((NumHits>1200)&&(NumHits<=1500)){*RewPulseTime = 100;}
	else {*RewPulseTime = 150;}

        if (RT<280){*RewPulseNum = 3;}
        if ((RT>=280)&&(RT<400)){*RewPulseNum = 2;}
        if ((RT>=400)&&(RT<1000)){*RewPulseNum = 1;}

    return *RewPulseNum;
}


int GetRewParam_FLETCHER(pint RewPulseNum, pint RewPulseTime)
{
	int randomnumber;

        if (NumHits<=100){*RewPulseTime = 80;}
        else if ((NumHits>100)&&(NumHits<=200)){*RewPulseTime = 80;}
        else if ((NumHits>200)&&(NumHits<=300)){*RewPulseTime = 80;}
        else if ((NumHits>300)&&(NumHits<=400)){*RewPulseTime = 80;}
        else if ((NumHits>400)&&(NumHits<=500)){*RewPulseTime = 80;}
        else if ((NumHits>500)&&(NumHits<=600)){*RewPulseTime = 80;}
        else if ((NumHits>600)&&(NumHits<=700)){*RewPulseTime = 80;}
        else if ((NumHits>700)&&(NumHits<=800)){*RewPulseTime = 80;}
        else if ((NumHits>800)&&(NumHits<=900)){*RewPulseTime = 80;}
        else if ((NumHits>900)&&(NumHits<=1000)){*RewPulseTime = 80;}
	else if ((NumHits>1000)&&(NumHits<=1200)){*RewPulseTime = 100;}
	else if ((NumHits>1200)&&(NumHits<=1500)){*RewPulseTime = 100;}
	else {*RewPulseTime = 150;}

	randomnumber = random(1,101);
	if      ((randomnumber>=1) && (randomnumber<=60)){*RewPulseNum = 1;} 
	else if ((randomnumber>=61) && (randomnumber<=90)){*RewPulseNum = 2;}    
	else if ((randomnumber>=91) && (randomnumber<=100)){*RewPulseNum = 3;}

	return *RewPulseNum;
}

int GetRewParam_PASCOE(pint RewPulseNum, pint RewPulseTime)
{
	int randomnumber;

        if (NumHits<=100){*RewPulseTime = 40;}
        else if ((NumHits>100)&&(NumHits<=200)){*RewPulseTime = 40;}
        else if ((NumHits>200)&&(NumHits<=300)){*RewPulseTime = 40;}
        else if ((NumHits>300)&&(NumHits<=400)){*RewPulseTime = 40;}
        else if ((NumHits>400)&&(NumHits<=500)){*RewPulseTime = 50;}
        else if ((NumHits>500)&&(NumHits<=600)){*RewPulseTime = 50;}
        else if ((NumHits>600)&&(NumHits<=700)){*RewPulseTime = 50;}
        else if ((NumHits>700)&&(NumHits<=800)){*RewPulseTime = 50;}
        else if ((NumHits>800)&&(NumHits<=900)){*RewPulseTime = 50;}
        else if ((NumHits>900)&&(NumHits<=1000)){*RewPulseTime = 60;}
        else if ((NumHits>1000)&&(NumHits<=1200)){*RewPulseTime = 60;}
        else if ((NumHits>1200)&&(NumHits<=1500)){*RewPulseTime = 60;}
        else if ((NumHits>1500)&&(NumHits<=2000)){*RewPulseTime = 80;}
        else if ((NumHits>2000)&&(NumHits<=2500)){*RewPulseTime = 80;}
	else {*RewPulseTime = 150;}

	randomnumber = random(1,101);
	if      ((randomnumber>=1) && (randomnumber<=60)){*RewPulseNum = 1;} 
	else if ((randomnumber>=61) && (randomnumber<=90)){*RewPulseNum = 2;}    
	else if ((randomnumber>=91) && (randomnumber<=100)){*RewPulseNum = 3;}

	return *RewPulseNum;
}
int GetRewParam_HOLMES(pint RewPulseNum, pint RewPulseTime)
{
	int randomnumber;

        if (NumHits<=100){*RewPulseTime = 50;}
        else if ((NumHits>100)&&(NumHits<=200)){*RewPulseTime = 50;}
        else if ((NumHits>200)&&(NumHits<=300)){*RewPulseTime = 50;}
        else if ((NumHits>300)&&(NumHits<=400)){*RewPulseTime = 50;}
        else if ((NumHits>400)&&(NumHits<=500)){*RewPulseTime = 80;}
        else if ((NumHits>500)&&(NumHits<=600)){*RewPulseTime = 80;}
        else if ((NumHits>600)&&(NumHits<=700)){*RewPulseTime = 80;}
        else if ((NumHits>700)&&(NumHits<=800)){*RewPulseTime = 80;}
        else if ((NumHits>800)&&(NumHits<=900)){*RewPulseTime = 80;}
        else if ((NumHits>900)&&(NumHits<=1000)){*RewPulseTime = 80;}
        else if ((NumHits>1000)&&(NumHits<=1200)){*RewPulseTime = 100;}
        else if ((NumHits>1200)&&(NumHits<=1500)){*RewPulseTime = 100;}
        else {*RewPulseTime = 100;}

	randomnumber = random(1,101);
	if      ((randomnumber>=1) && (randomnumber<=60)){*RewPulseNum = 1;} 
	else if ((randomnumber>=61) && (randomnumber<=90)){*RewPulseNum = 2;}    
	else if ((randomnumber>=91) && (randomnumber<=100)){*RewPulseNum = 3;}

	return *RewPulseNum;
}

//##########################################################################################################
void GiveRewPulseCrist(int n)
{        
        int i;

        for (i=0;i<n;i++)
        {   
            // wait 100 msec between
            if (i>0) {set_timer(100);while(timer_expired() == 0);}
            
            reward();
            
            NumRew++;
            
        }
        encode(REWARD_GIVEN);
        
}

void GiveRewPulse(int n, int RewardTime)
{        
        int i;

        for (i=0;i<n;i++)
        {   
            // wait 100 msec between
            if (i>0) {set_timer(100);while(timer_expired() == 0);}

            //give reward
            set_timer(RewardTime);
            DEVoutp(DIOBOARDNR,2,128);
            while(timer_expired() == 0);
            DEVoutp(DIOBOARDNR,2,0);

            NumRew++;
            
        }
        encode(REWARD_GIVEN);
        
}

//##########################################################################################################
void ShuffleArray(int n, pint arr)
{
    int i,j;
    int index;
    int cnt, exist;

    arr[0] = random(0,n);

    for(i=1;i<n;i++){
        exist=1;
        // draw random numbers as long as you found existing numbers
        while (exist==1){
            index = random(0,n);
            
            for(j=0;j<i;j++){

                if (index==arr[j]) { exist = 1;break;}
                else               { exist = 0;}
            }
        }
        arr[i] = index;
    }
}

void ShuffleArraySegment(int StartIndex,int StopIndex, pint arr)
{
    int i,j;
    int index;
    int cnt, exist;
    int n;
    
    n = StopIndex-StartIndex+1;

    arr[StartIndex] = StartIndex + random(0,n);

    for(i=StartIndex+1;i<=StopIndex;i++){
        exist=1;
        // draw random numbers as long as you found existing numbers
        while (exist==1){
            index = StartIndex + random(0,n);
            
            for(j=StartIndex;j<i;j++){

                if (index==arr[j]) { exist = 1;break;}
                else               { exist = 0;}
            }
        }
        arr[i] = index;
    }
}
//##########################################################################################################
void SendByteA(int code){
    // send 8 bits to port A
    DEVoutp(DIOBOARDNR,0,code);
}
void SendByteA_plus(int code, int timegap){
    // send 8 bits to port A
    DEVoutp(DIOBOARDNR,0,code);
    set_timer(timegap);while(timer_expired() == 0);
    DEVoutp(DIOBOARDNR,0,0);
    set_timer(timegap);while(timer_expired() == 0);
}

void SendByteB(int code){
    // send 8 bits to port A
    DEVoutp(DIOBOARDNR,1,code);
}

void Send2BytesAB(int code){
    // send 16 bits to port A (low) B (high)
    DEVoutp(DIOBOARDNR,0,code);
    DEVoutp(DIOBOARDNR,1,code/256);
}
void SendByteAStrobeBit7B(int code){
    // send 8 bits to port A and strobe port B bit 15
    DEVoutp(DIOBOARDNR,0,code);
    DEVoutp(DIOBOARDNR,1,0);
    // now strobe
    DEVoutp(DIOBOARDNR,1,128);
}

void Send15BitStrobeBit15(int code){
    // send 15 bits(max 32767) to port A and B strobe bit 15 on port B
    int CodeB;
	DEVoutp(DIOBOARDNR,0,code);
	CodeB = code/256;
	if (CodeB>127){CodeB=CodeB-128;}
	DEVoutp(DIOBOARDNR,1,CodeB);
	// now strobe
	DEVoutp(DIOBOARDNR,1,CodeB+128);
}

//##########################################################################################################
void Config_SETUP1(){
	// PCI Board
	// Port [A,B,Cl,Ch]
	//output output input output
	DEVoutp(0,0x03,0x81);
}
void Config_SETUP3(){
	// ISA Board
	// Port [A,B,Cl,Ch]
	//output output input output
	DEVoutp(1,0x03,0x81);
}	
//##########################################################################################################
int KEY_action1()
// This function reads out the key pressed and initialise the necessary action,
// i.e. setting global variables.
{   int esc_state;
    
    esc_state =  esc_flag;
    if(KeyPressed() == 0)
    {esc_flag = esc_state; }
    else
    {
        switch(GetAKey())
        {
            // SPACE BAR, indicates to give reward (only one pulse)
            case 14624:     esc_flag = esc_state;
                            GiveRewPulse(1,40);
                            Mprintf(5,"REWARD (40ms) by user");break;
            
            case K_ESCAPE:  Mprintf(5,"ESCAPE pressed ");
                            SendByteB(0);
                            // BLOCKset_next(-1, -1);
                            response_missing(0);
                            // NumCycles = 0;
                            esc_flag=1;
                            NewStartMarker=0;
                            
			 //ActualTrialNum =0;
				break;
       }
    }
    return esc_flag;
}
//##########################################################################################################
int KEY_action2(float step,pfloat X, pfloat Y)
{   int esc_state;
    
    esc_state =  esc_flag;
    if(KeyPressed() == 0)
    {esc_flag = esc_state; }
    else
    {
        switch(GetAKey())
        {
            // SPACE BAR, indicates to give reward (only one pulse)
            case 14624:     esc_flag = esc_state;
                            GiveRewPulse(1,40);
                            Mprintf(5,"REWARD (40ms) by user");break;
            
            case K_ESCAPE:  Mprintf(5,"ESCAPE pressed ");
                            SendByteB(0);
                            BLOCKset_next(-1, -1);
                            response_missing(0);
                            NumCycles = 0;
                            esc_flag=1;
                  
			
			// ActualTrialNum =0;
break;
            case K_LEFTARROW:   *X = *X + -1.0 * step;Mprintf(5,"LEFT pressed ");break;
            case K_RIGHTARROW:  *X = *X +  1.0 * step;Mprintf(5,"RIGHT pressed ");break;
            case K_UPARROW:     *Y = *Y +  1.0 * step;Mprintf(5,"UP pressed ");break;
            case K_DOWNARROW:   *Y = *Y + -1.0 * step;Mprintf(5,"DOWN pressed ");break;
        }
    }
    return esc_flag;
}
//##########################################################################################################
int FixCheck(int FixControlTimer, int MaxBreakFixTime, pint BrokeFixFlag)
// returns fixation state
{
	int FixErrorFlag=0;
	
	if ((*BrokeFixFlag==0) && (get_fixation_state() == 0))
	{
		MS_TIMERset(FixControlTimer,(long) MaxBreakFixTime);
		*BrokeFixFlag=1;
		FixErrorFlag=0;
                SCREENdraw_fixwin (LIGHTRED);
        }
	else if ((*BrokeFixFlag==1) && (get_fixation_state()==0) && (MS_TIMERcheck(FixControlTimer)>0))
	{
		*BrokeFixFlag=1;
		FixErrorFlag=0;
                SCREENdraw_fixwin (LIGHTRED);
	}
	else if ((*BrokeFixFlag==1) && (get_fixation_state()==0) && (MS_TIMERcheck(FixControlTimer)==0))
	{
		*BrokeFixFlag=0;
		FixErrorFlag=1;
		SCREENdraw_fixwin (RED);
	}
	else if ((*BrokeFixFlag==1) && (get_fixation_state()==1))
	{
		MS_TIMERset(FixControlTimer,(long) 0);
		*BrokeFixFlag=0;
		FixErrorFlag=0;
                SCREENdraw_fixwin (YELLOW);
	}
	else if ((*BrokeFixFlag==0) && (get_fixation_state()==1))
	{
		*BrokeFixFlag=0;
		FixErrorFlag=0;
//                SCREENdraw_fixwin (GREEN);
	}
	return FixErrorFlag;
}

//##########################################################################################################
int SaccadeChoice(int FirstTEST,int SecondTEST, int GazeTimer)
{
	float X_HiRisk,Y_HiRisk,X_LoRisk,Y_LoRisk;
        int HasGambled=0;
        int SelectedTEST;
	float TESTtheta;
        int i;
        float TESTrho=6.0;
	int CurrentTEST;
        float GazeWin=3.0;
	long GambleTime=1000;
        long GazeTime=80;
	//-------------------------------------------------------------------------------------------------------
        // display test on circle
/*        TESTtheta = (float)(random(1,361));
	X_HiRisk = polar2x(TESTrho,TESTtheta);
	Y_HiRisk = polar2y(TESTrho,TESTtheta);
	X_LoRisk = polar2x(TESTrho,TESTtheta+60.0);
	Y_LoRisk = polar2y(TESTrho,TESTtheta+60.0);
*/        // display test on grid
        i = random(1,5);
        if (i==1)        {X_HiRisk =       TESTrho;Y_HiRisk =       TESTrho;X_LoRisk =(-1.0)*TESTrho;Y_LoRisk =       TESTrho;}  
        else if (i==2)   {X_HiRisk =       TESTrho;Y_HiRisk =(-1.0)*TESTrho;X_LoRisk =(-1.0)*TESTrho;Y_LoRisk =(-1.0)*TESTrho;}  
        else if (i==3)   {X_HiRisk =(-1.0)*TESTrho;Y_HiRisk =(-1.0)*TESTrho;X_LoRisk =       TESTrho;Y_LoRisk =(-1.0)*TESTrho;}  
        else if (i==4)   {X_HiRisk =(-1.0)*TESTrho;Y_HiRisk =       TESTrho;X_LoRisk =       TESTrho;Y_LoRisk =       TESTrho;}  


        GmoveABS(FirstTEST,X_HiRisk,Y_HiRisk);
        GmoveABS(SecondTEST,X_LoRisk,Y_LoRisk);
        GcolorABS(ITEM_POSlut_index(FirstTEST,1),0,0,0);
        GcolorABS(ITEM_POSlut_index(SecondTEST,1),0,0,0);
        Gon_off(FIXSPOT,OFF);
	Gon_off(FirstTEST,ON);
        Gon_off(SecondTEST,ON);
	Gflush(1);
        ITEM_POSmark_pos(FirstTEST,1,RED);
        ITEM_POSmark_pos(SecondTEST,1,BLUE);
        DrawBox(X_HiRisk,Y_HiRisk,GazeWin,GazeWin,LIGHTBLUE);
        DrawBox(X_LoRisk,Y_LoRisk,GazeWin,GazeWin,LIGHTBLUE);
	//-------------------------------------------------------------------------------------------------------
	// control gaze
	set_timer(GambleTime);
	while(timer_expired() == 0)
	{
                // whats the current target monkey is looking at?
                if 		(ITEM_POSeye_iswithin (FirstTEST,1,GazeWin,GazeWin)==1) {HasGambled = 1;CurrentTEST = FirstTEST;}
                else if 	(ITEM_POSeye_iswithin (SecondTEST,1,GazeWin,GazeWin)==1) {HasGambled = 2;CurrentTEST = SecondTEST;}
                else {HasGambled = 0;CurrentTEST = -1;}
                
                // monkey has to look GazeTime on this target
                if (CurrentTEST>-1)
                {
                	MS_TIMERset(GazeTimer,(long) GazeTime);
   			while(MS_TIMERcheck(GazeTimer) > 0)
    			{	
    				if (ITEM_POSeye_iswithin (CurrentTEST,1,GazeWin,GazeWin)==0)
    				{
    					HasGambled = 0;	
					break;
				}
			}
			
			if (HasGambled>0){break;}
		}
	}
	
	//-------------------------------------------------------------------------------------------------------
	// change target color to signal decision
        if (HasGambled==1)
        {Gon_off(SecondTEST,OFF);Gflush(1);set_timer(400);while(timer_expired() == 0);}
        else if (HasGambled==2)
        {Gon_off(FirstTEST,OFF);Gflush(1);set_timer(400);while(timer_expired() == 0);}
		
	//-------------------------------------------------------------------------------------------------------
	// switch of graphics
        Gon_off(FirstTEST,OFF);
	Gon_off(SecondTEST,OFF);
	Gflush(1);
        ITEM_POSmark_pos (FirstTEST,1,BLACK);
        ITEM_POSmark_pos (SecondTEST,1,BLACK);
	
        return HasGambled;
}

//##########################################################################################################
int getGambleReward(int RewardCode, pint RewPulseNum)
{
	int randomnumber;

	if (RewardCode==1)
	{
		randomnumber = random(1,101);
/*                if      ((randomnumber>=1) && (randomnumber<=50)){*RewPulseNum = 0;} 
		else if ((randomnumber>=51) && (randomnumber<=70)){*RewPulseNum = 1;}    
		else if ((randomnumber>=71) && (randomnumber<=90)){*RewPulseNum = 2;}    
                else if ((randomnumber>=91) && (randomnumber<=100)){*RewPulseNum = 4;}    
*/
                if      ((randomnumber>=1) && (randomnumber<=66)){*RewPulseNum = 1;} 
                else if ((randomnumber>=67) && (randomnumber<=100)){*RewPulseNum = 4;}    



        }
	else if (RewardCode==2)
	{
                *RewPulseNum = 2;
	}
        else
	{
                *RewPulseNum = 0;
	}
	return 0;
}

int getGambleRewardPlus(int RewardCode, pint RewPulseNum , pint RewPulseTime)
{
	int randomnumber;

        if (NumHits<=100){*RewPulseTime = 30;}
        else if ((NumHits>100)&&(NumHits<=200)){*RewPulseTime = 40;}
        else if ((NumHits>200)&&(NumHits<=300)){*RewPulseTime = 40;}
        else if ((NumHits>300)&&(NumHits<=400)){*RewPulseTime = 50;}
        else if ((NumHits>400)&&(NumHits<=500)){*RewPulseTime = 50;}
        else if ((NumHits>500)&&(NumHits<=600)){*RewPulseTime = 50;}
        else if ((NumHits>600)&&(NumHits<=700)){*RewPulseTime = 60;}
        else if ((NumHits>750)&&(NumHits<=800)){*RewPulseTime = 60;}
        else if ((NumHits>800)&&(NumHits<=900)){*RewPulseTime = 80;}
        else if ((NumHits>900)&&(NumHits<=1000)){*RewPulseTime = 80;}
        else if ((NumHits>1000)&&(NumHits<=1200)){*RewPulseTime = 100;}
        else if ((NumHits>1200)&&(NumHits<=1500)){*RewPulseTime = 100;}
        else {*RewPulseTime = 150;}

	if (RewardCode==1)
	{
		randomnumber = random(1,101);
/*                if      ((randomnumber>=1) && (randomnumber<=50)){*RewPulseNum = 0;} 
		else if ((randomnumber>=51) && (randomnumber<=70)){*RewPulseNum = 1;}    
		else if ((randomnumber>=71) && (randomnumber<=90)){*RewPulseNum = 2;}    
                else if ((randomnumber>=91) && (randomnumber<=100)){*RewPulseNum = 4;}    
*/
                if      ((randomnumber>=1) && (randomnumber<=66)){*RewPulseNum = 1;} 
                else if ((randomnumber>=67) && (randomnumber<=100)){*RewPulseNum = 4;}    



        }
	else if (RewardCode==2)
	{
                *RewPulseNum = 2;
	}
        else
	{
                *RewPulseNum = 0;
	}
	return 0;
}
//##########################################################################################################
int readCndArray(pchar ArrayFileName, int ArrayNum, pint Array)
{
        int ArrayPointer;
        long fp;
        int i,k;
        int currArrayValue=0;
        char fn[50];

	k = sprintf(fn,ArrayFileName);
	fp = fopen(fn,"r");

	fscanf(fp,"%d ",&ArrayPointer);
	
	if (ArrayNum>0)
	{
		if (ArrayPointer>=ArrayNum){ArrayPointer=0;}

		for (i=0;i<ArrayNum;i++)
		{
			fscanf(fp,"%d",&currArrayValue);
			Array[i] = currArrayValue;
		}
	}
	fclose(fp);
	return ArrayPointer;
}
int writeCndArray(pchar ArrayFileName, int ArrayNum, pint Array, int AP)
{
        long fp;
        int i,k;
        char fn[50];

        k = sprintf(fn,ArrayFileName);
        fp = fopen(fn,"w");        
        if (AP>=ArrayNum){AP=0;}
        fprintf(fp,"%d ",AP);
       
        for(i=0;i<ArrayNum;i++)
        {
                fprintf(fp,"%d ",Array[i]);
        }
        
        fclose(fp);
        return k;
}

float readPARAM(pchar ParFile, pchar ParName)
{
        char fn[50];
        char p[50];
        int k;
        float ParValue;
        k = sprintf(fn,ParFile);
        k = sprintf(p,ParName);
        ParValue = get_param(p,0.0,fn);
        return ParValue;
}
//#####################################################



//##########################################################################################################
int readTrialHistory100(pint StimCodeBuffer,pint ErrCodeBuffer)
{
        int TotalTrialNum;
        int BufferSize=100;
        long fp;
        int i,k;
        int currStimCodeValue=0;
        int currErrCodeValue=0;
        char fn[50];

        k = sprintf(fn,TrialHistoryFilename);
        fp = fopen(fn,"r");

        fscanf(fp,"%d ",&TotalTrialNum);
        
        
        for (i=0;i<BufferSize;i++)
        {
                fscanf(fp,"%d",&currStimCodeValue);
                fscanf(fp,"%d",&currErrCodeValue);
                
                if ((TotalTrialNum>=BufferSize) || ((TotalTrialNum<BufferSize)&&(i>=BufferSize-TotalTrialNum)))
                {
                	StimCodeBuffer[i] = currStimCodeValue;
                	ErrCodeBuffer[i] = currErrCodeValue;
		}            
        }
        fclose(fp);
        return TotalTrialNum;
        
}
int getTrialHistory100(int TrialHistRange, pfloat PCcorrect, pfloat PCmissed, pfloat PCerror)
{
        int TotalTrialNum;
        int BufferSize=100;
        long fp;
        int i,k;
        int StimCodeBuffer[100];
        int ErrCodeBuffer[100];
        int Ncorrect, Nmissed, Nerror;
        
        TotalTrialNum = readTrialHistory100(&StimCodeBuffer,&ErrCodeBuffer);
        if (TotalTrialNum<TrialHistRange)
        {
        	TrialHistRange = TotalTrialNum;
        }
        
        for (i=0;i<TrialHistRange;i++)
        {
                switch (ErrCodeBuffer[BufferSize-TrialHistRange+i-1])
        	{
        		case 0:	Ncorrect++;
        		case 1:	Nmissed++;
        		case 2:	Nerror++;
        	}
        }
        
        *PCcorrect = (float) Ncorrect / (float) TrialHistRange;
        *PCmissed =  (float) Nmissed / (float) TrialHistRange;
        *PCerror =  (float) Nerror / (float) TrialHistRange;
        return TotalTrialNum;
}

int appendTrialHistory100(int StimCode, int ErrCode)
{
        long fp;
        int i,k;
        int TotalTrialNum;
        int BufferSize=100;
        int StimCodeBuffer[100];
        int ErrCodeBuffer[100];
        char fn[50];

        TotalTrialNum = readTrialHistory100(&StimCodeBuffer,&ErrCodeBuffer);
        TotalTrialNum = TotalTrialNum++;

        k = sprintf(fn,TrialHistoryFilename);
        fp = fopen(fn,"w");
        
        fprintf(fp,"%d ",TotalTrialNum);
        
        for(i=0;i<BufferSize-1;i++)
        {
                fprintf(fp,"%d ",StimCodeBuffer[i+1]);
                fprintf(fp,"%d ",ErrCodeBuffer[i+1]);
        }
        fprintf(fp,"%d ",StimCode);
        fprintf(fp,"%d ",ErrCode);
        
        fclose(fp);
        return TotalTrialNum;
}
//##########################################################################################################
void makeTestScreenArray(int ArrayNum,pint Array)
{
	int i;
	
	if (ArrayNum>10){ArrayNum=10;}
	
	for (i=0;i<ArrayNum;i++)
	{
                if (i==0){Array[i] = TEST0;}
		else if (i==1){Array[i] = TEST1;}
		else if (i==2){Array[i] = TEST2;}
		else if (i==3){Array[i] = TEST3;}
		else if (i==4){Array[i] = TEST4;}
		else if (i==5){Array[i] = TEST5;}
		else if (i==6){Array[i] = TEST6;}
		else if (i==7){Array[i] = TEST7;}
		else if (i==8){Array[i] = TEST8;}
		else if (i==9){Array[i] = TEST9;}
	}
}
/*//##########################################################################################################
int CheckEyePosition(int PosNum, float WinRad, int PosX, int PosY)
{
	int i;
	float EyeX, EyeY;
	int EyePos=0;
	
	EYEget_dva(&EyeX,&EyeY);
	
	for (i=0;i<ArrayNum;i++)
	{
		if  (cart2r(EyeX-PosX[i],EyeY-PosY[i])<=WinRad){EyePos=i+1;break;}
		else {EyePos=0};
	}
	return EyePos;
}
//##########################################################################################################
int Gamble(int GambleTestScreen,int GambleFrame, pchar GambleFileName, int GambleItemNum)
{
        int ArrayPointer;
        long fp;
        int i,k;
        int currArrayValue=0;
        char fn[50];
        int currFrameItemNum;
        int GambleItemFrameNr[GambleItemNum];
        int XPos[GambleItemNum];
        int YPos[GambleItemNum];
        int GambleItemLUTindex[GambleItemNum];
        int FlickerTime=50;
        int CurrGazePosition;
        int LastGazePosition;
        int CurrGazeTime;
        int HasGambled;
	
	
	// Read Gamble File (4 int per item [frameNr XPos YPos LUTindex]
        k = sprintf(fn,GambleFileName);
        fp = fopen(fn,"r");
        for (i=0;i<GambleItemNum;i++)
        {
                fscanf(fp,"%d",&currArrayValue);
                if (currArrayValue==GambleFrame){currFrameItemNum++;}
                GambleItemFrameNr[i] = currArrayValue;
                fscanf(fp,"%d",&currArrayValue);
                XPos[i] = currArrayValue;
                fscanf(fp,"%d",&currArrayValue);
                YPos[i] = currArrayValue;
                fscanf(fp,"%d",&currArrayValue);
                GambleItemLUTindex[i] = currArrayValue;
        }
        fclose(fp);
 	
 	// prepare graphics
 	GmoveABS(GambleTestScreen,0.0,0.0);
	Gmovie_step (GambleTestScreen,1,MOVIE_FIRST_FRAME);
	Gmovie_step (GambleTestScreen,GambleFrame-1,MOVIE_STEP_WRAP);
        Gon_off(FIXSPOT,OFF);
	Gon_off(GambleTestScreen,ON);
	Gflush(1);
	
	//
	MS_TIMERset(GAMBLEGAZE_TIMER,2000);
	while (MS_TIMERcheck(GAMBLEGAZE_TIMER)>0)
	{
		CurrGazePosition = CheckEyePosition(int PosNum, float WinRad, int XPos, int YPos);
		if ((CurrGazePosition>0)&&(CurrGazePosition!=LastGazePosition))
		{
			CurrGazeTime = MS_TIMERcheck(GAMBLEGAZE_TIMER);
			LastGazePosition = CurrGazePosition;
		}
		else if ((CurrGazePosition>0)&&(CurrGazePosition==LastGazePosition))
		{
			if (CurrGazeTime-MS_TIMERcheck(GAMBLEGAZE_TIMER)>500)
			{
				HasGambled = CurrGazePosition;
				break;
			}
		}
		else if (CurrGazePosition==0)
		{
			HasGambled = 0;
			CurrGazeTime = MS_TIMERcheck(GAMBLEGAZE_TIMER);
			LastGazePosition = 0;
		}
	}
		
	return HasGambled;

}
*/

//##########################################################################################################
int wrap2interval(int xLO,int xN,int x)
{
	if (x<xLO)
	{
		x = x + (ceil( (float) (xLO-x)/ (float) xN))*xN;
	}
	else if (x>(xLO+xN-1))
	{
		x = x - (floor( (float) (x-(xLO+xN-1))/ (float) xN))*xN;
	}
	return x;
}
//##########################################################################################################
int StepAMovie(int MovieTestScreen, int FirstFrame,int FrameNumPerInterval, int MovieStep, int CurrentFrame)
{
	int NewFrameNr;
	
	NewFrameNr = CurrentFrame + MovieStep;
	if (NewFrameNr<FirstFrame)
	{
		NewFrameNr = NewFrameNr + (ceil((float) (FirstFrame-NewFrameNr)/ (float) FrameNumPerInterval))*FrameNumPerInterval;
		MovieStep = NewFrameNr-CurrentFrame;
	}
	else if (NewFrameNr>(FirstFrame+FrameNumPerInterval-1))
	{
		NewFrameNr = NewFrameNr - (ceil((float) (NewFrameNr-(FirstFrame+FrameNumPerInterval-1))/ (float) FrameNumPerInterval))*FrameNumPerInterval;
		MovieStep = NewFrameNr-CurrentFrame;
	}
	

	Gmovie_step (MovieTestScreen,MovieStep,MOVIE_STEP_WRAP);
	return NewFrameNr;
}
