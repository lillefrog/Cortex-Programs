// shows frames of a cortex movie in a REVERSE CORRELATION procedure
// subject has to fixate

//include files
#include "css_inc.h"

// general definitions------------------------------------------------------------------------------------
#include "AL_INCL/AL_CODES.STT"
#include "AL_INCL/AL_PARAM.STT"

// paradigm specific definitions------------------------------------------------------------------------------------
// current timing file
#define STT_NAME     "RF_RVCO"
#define STT_VERSION  1
#define STT_REVISION 0

// Stimulus parameter
#define GRID_ROWS                               9
#define GRID_COLS                               12
// #define GRID_SPACING  = readPARAM(RF_PARAM_FILE,"GRID_Spacing"); //1
#define CONDITION_NUM                   4
#define STIM_ON           13 //8// 6// number of frames dots are switched on
#define STIM_OFF            0// number of frames dots are switched off
#define SEQUENCE_OVERLAP                        0
//  Times
#define FIX_WAIT_TIME           5000
#define STIM_DELAY              300
#define FIX_TIME                2000
#define POSTTRIAL_DELAY         300
#define minINTERTRIAL           100
#define maxINTERTRIAL           300
#define TIME_PENALTY            200

// Timers
#define FIX_WAIT_TIMER          1
#define STIM_DELAY_TIMER        2
#define FIX_TIMER               3
#define INTERTRIALTIMER         4
#define FIXCHECK_TIMER          5
#define GAMBLEGAZE_TIMER        6
#define POSTTRIAL_TIMER          8


#define STIM_SEQ_FILE                 "RFRC\\RFRC.SEQ"
#define RF_PARAM_FILE                 "PAR.TXT"

//---------------------------------------------------------------------------------------------------------
#include "AL_INCL/AL_FDEC.STT"


//##########################################################################################################

main()
{
        float GRID_SPACING  = readPARAM(RF_PARAM_FILE,"Grid_Spacing");
        int GridType = readPARAM(RF_PARAM_FILE,"GridType");
        int BlockNr, CondNr, BlockNum;
        pint CondNum;
        int StimNr;
        //int StimSequence [GRID_ROWS*GRID_COLS*2/CONDITION_NUM];
        int StimOnFrameNr [GRID_ROWS*GRID_COLS*2/CONDITION_NUM];
        int StimOffFrameNr [GRID_ROWS*GRID_COLS*2/CONDITION_NUM];
        float StimPosX [GRID_ROWS*GRID_COLS*2];
        float StimPosY [GRID_ROWS*GRID_COLS*2];
        float FixWinX, FixWinY;
    //    int StimTestScreen [GRID_ROWS*GRID_COLS*2];
        int Stimulus;
        int StimSeqIndex[GRID_ROWS*GRID_COLS*2];
        int ShuffleIndex[GRID_ROWS*GRID_COLS*2];
        int i;
        int rewpulse_num, rewpulse_time;
        int InterTrialInterval;
        int cFr, cSt;
        float fix_x, fix_y, rf_x, rf_y;
        int StimNum, SeqNum;
        int GridRowNr, GridColNr;
        int SeqFrameNum, SeqDuration;

        //---------------------------------------------------------------------------------------------------------
        // initialise neuralynx receive
        Config_SETUP1();
        SendByteA_plus(0,5);
        encode(START_PRE_TRIAL);
        SendByteA_plus(NLX_TRIAL_START,5);
        
        //---------------------------------------------------------------------------------------------------------
        // load parameter
        fix_x = readPARAM(RF_PARAM_FILE,"FIX_x");
        fix_y = readPARAM(RF_PARAM_FILE,"FIX_y");
        rf_x = readPARAM(RF_PARAM_FILE,"RF_x");
        rf_y = readPARAM(RF_PARAM_FILE,"RF_y");
        rf_x = fix_x + rf_x;
        rf_y = fix_y + rf_y;
        FixWinX = readPARAM(RF_PARAM_FILE,"FIX_WIN_x");
        FixWinY = readPARAM(RF_PARAM_FILE,"FIX_WIN_y");
		set_fixwin_params(0,FixWinX,FixWinY);

        //---------------------------------------------------------------------------------------------------------
        // load parameter
        StimNum = GRID_ROWS*GRID_COLS;
        SeqNum = GRID_ROWS*GRID_COLS/CONDITION_NUM;
        
		//---------------------------------------------------------------------------------------------------------
		// Set stimulus and grid spacing
		// 1=0.1 2=0.25 3=0.5 4=1.0 5=1.5 6=2.0 ,"GridType");
		
       switch (GridType) // Set the size of the stimulus and grid spacing
        {
        case(1): Stimulus = TEST1; GRID_SPACING = 0.10; break;                // 0.10
        case(2): Stimulus = TEST2; GRID_SPACING = 0.25; break;                // 0.25
        case(3): Stimulus = TEST3; GRID_SPACING = 0.50; break;                // 0.50
        case(4): Stimulus = TEST4; GRID_SPACING = 1.00; break;                // 1.00
        case(5): Stimulus = TEST5; GRID_SPACING = 1.50; break;                // 1.50
        case(6): Stimulus = TEST6; GRID_SPACING = 2.00; break;                // 2.00
        default : Stimulus = TEST4; GRID_SPACING = 1.00; break;               // 1.00
        }
		
		
        //---------------------------------------------------------------------------------------------------------
        // stimulus property arrays
        GridRowNr = 0;
        GridColNr = 0;
        for (i=0;i<StimNum;i++)
        {
                if (GridRowNr==GRID_ROWS){GridRowNr=0;GridColNr++;}
                if (GridColNr==GRID_COLS){GridColNr=0;}
                StimPosX[i] =          GRID_SPACING * ((float) GridColNr) - ((float) GRID_COLS-1.0)*GRID_SPACING/2.0 + rf_x;
                StimPosY[i] = (-1.0) * GRID_SPACING * ((float) GridRowNr) + ((float) GRID_ROWS-1.0)*GRID_SPACING/2.0 + rf_y;
                GridRowNr++;

//              if (i<StimNum/2)
//              {StimTestScreen[i] = TEST1;}
//              else
//              {StimTestScreen[i] = TEST2;}
//                StimTestScreen[i] = TEST1;
//                                Stimulus = TEST1; // 0.10

                StimSeqIndex[i] = i+1;// StimNr 1-n
                ShuffleIndex[i] = i;
        }
        

		
        //---------------------------------------------------------------------------------------------------------
        // sequence property arrays
        for (i=0;i<SeqNum;i++)
        {
                StimOnFrameNr[i] = i*(STIM_ON+STIM_OFF)+1;// Frame Nr (1...n)
                StimOffFrameNr[i] = i*(STIM_ON+STIM_OFF)+STIM_ON+1;// Frame Nr (1...n);
        }               
        SeqFrameNum = SeqNum*STIM_ON+(SeqNum-1)*STIM_OFF+1;
        SeqDuration = (int)((float)SeqFrameNum*1000.0/(float)FRAMERATE);
        
        //---------------------------------------------------------------------------------------------------------
        // randomise stimulus sequence
        StimNr = readCndArray(STIM_SEQ_FILE,0,StimSeqIndex);// read current stimulus nr first
        if ((StimNr==0)||(StimNr>=StimNum))// create new sequence
        {
                StimNr=0;
                ShuffleArray(StimNum,ShuffleIndex);
                for(i=0;i<StimNum;i++){StimSeqIndex[i] = ShuffleIndex[i]+1;}
                writeCndArray(STIM_SEQ_FILE,StimNum,StimSeqIndex,StimNr);// write array
                NumCycles++;
        }
        else
        {
                StimNr = readCndArray(STIM_SEQ_FILE,StimNum,StimSeqIndex);
        }
                

        //---------------------------------------------------------------------------------------------------------
        // prepare graphics
//      GcolorLUT(1);
        Gon_off(FIXSPOT,OFF);
        Gon_off(TEST1,OFF);
        Gon_off(TEST2,OFF);
        Gon_off(TEST3,OFF);
        Gon_off(TEST4,OFF);
        Gon_off(TEST5,OFF);
        Gon_off(TEST6,OFF);
        GmoveABS(FIXSPOT,fix_x,fix_y);
        Gflush(1);
        
        //---------------------------------------------------------------------------------------------------------
        // calculate presentation sequence
        BlockNr = BLOCKget_block_num();
        CondNr = BLOCKget_cond_num();
        BlockNum = BLOCKget_max_vals (CondNum);

        //---------------------------------------------------------------------------------------------------------
        // calculate misc. parameter
        InterTrialInterval = random(minINTERTRIAL,maxINTERTRIAL); 
//      GetRewParam_STARSKY_2(&rewpulse_num,&rewpulse_time); 
        GetRewNum_STARSKY_Setup_1(&rewpulse_num);
        rewpulse_time = 0; 

        //---------------------------------------------------------------------------------------------------------
        // message board
        Mprintf(1,"%s %d.%d #Hit:%d #Rew:%d Cycl:%d ",STT_NAME,STT_VERSION,STT_REVISION,NumHits,NumRew,NumCycles);
        Mprintf(2,"%d ms, %d frames @ %d(?!) Hz; nextRew: %dx%d",SeqDuration,SeqFrameNum,FRAMERATE,rewpulse_num,rewpulse_time);
        Mprintf(3,"RF(%2.2f,%2.2f) Fix(%2.2f,%2.2f) %dx%d %2.1f",rf_x,rf_y,fix_x,fix_y,GRID_ROWS,GRID_COLS,GRID_SPACING);
        
        //---------------------------------------------------------------------------------------------------------
        // record trial parameter
        encode(TRIALPARAM_START);
        encode(PARAMBASE+STT_VERSION);
        encode(PARAMBASE+STT_REVISION);
        encode(PARAMBASE+((int) (fix_x*100.0)));
        encode(PARAMBASE+((int) (fix_y*100.0)));
        encode(PARAMBASE+((int) (rf_x*100.0)));
        encode(PARAMBASE+((int) (rf_y*100.0)));
		encode(PARAMBASE+ (int) (FixWinX*100));
		encode(PARAMBASE+ (int) (FixWinY*100));
        encode(TRIALPARAM_END);

        // send parameter to neuralynx
        SendByteA_plus(NLX_TRIALPARAM_START,5);   
        SendByteA_plus(BlockNr,5);   
        SendByteA_plus(CondNr,5);   
        SendByteA_plus(CondNr,5);   
        SendByteA_plus(NLX_TRIALPARAM_END,5);   

        //---------------------------------------------------------------------------------------------------------
        encode(END_PRE_TRIAL);

        //---------------------------------------------------------------------------------------------------------
        // prepare CORTEX display
        clear_eog(); 
        display_eye_path(ON);
        SCREENdraw_fixwin(BLACK);

        // prepare spike data recording
        start_trial (20);
        collect_data (ON);
        display_histogram();
        display_trial_progress(ON);


        //---------------------------------------------------------------------------------------------------------
        //                                           START TRIAL
        //---------------------------------------------------------------------------------------------------------

        /////////////////////
        //Wait for the bar//
        /////////////////////

        while ((get_bar_state() == 0) && (esc_flag==0) && (terminate_flag==0))
        {       
                esc_flag = KEY_action1();
        }

        // prepare eye data recording
        put_eye_data_in_buf(1);
        encode(START_EYE_DATA);
        SendByteA_plus(NLX_RECORD_START,5);

        /////////////////////
        //wait for FIXATION//
        /////////////////////
        if ((get_bar_state() == 1)&& (esc_flag==0) && (terminate_flag==0))
        {
                Gon_off(FIXSPOT,ON);
                Gflush(1);
                encode(TURN_FIXSPOT_ON);
                break;
        }
        MS_TIMERset(FIX_WAIT_TIMER,(long) FIX_WAIT_TIME);
        while ((MS_TIMERcheck(FIX_WAIT_TIMER) > 0) && (esc_flag==0) && (terminate_flag==0))
        {   
                KEY_action1();

                SCREENdraw_fixwin (DARKGRAY);
                if(get_fixation_state() == 1)
                {
                        terminate_flag = 0;
                        //====================================================
                        encode(FIXATION_OCCURS);
                        SendByteA(NLX_SUBJECT_START);
                        //====================================================
                        break;
                }
//              else {terminate_flag = 1;}
                
                if (get_bar_state() == 0)
                {
                        response_no_bar_down(0);
                        terminate_flag=1;
                        missed_flag = 1;
                        break;
                }
                        
        }

        ///////////////
        //STIM DELAY// 
        ///////////////
        Mprintf(5,"WAIT for stimulus");
        MS_TIMERset(STIM_DELAY_TIMER,(long)STIM_DELAY);
        while ((MS_TIMERcheck(STIM_DELAY_TIMER) > 0) && (esc_flag==0) && (terminate_flag==0))
        {
                esc_flag = KEY_action1(); 
                
                if (FixCheck(FIXCHECK_TIMER,MAX_BREAK_FIX_TIME,&breakfix_flag) == 1)
                {
                        break_fixation_error ();
                        SCREENdraw_fixwin (RED);
                        error_flag = 1;
                        terminate_flag = 1;
                        break;
                }
                if (get_bar_state() == 0)
                {
                        response_no_bar_down(0);
                        terminate_flag=1;
                        missed_flag = 1;
                        break;
                }
        }
        
        /////////////////////
        // Stimulus//
        /////////////////////
        if ((esc_flag==0) && (terminate_flag==0))
        {
                Mprintf(5,"STIMULUS presentation");
                encode(STIM_SWITCH);
                cSt = 0;
                
                for (cFr=1;cFr<=SeqFrameNum+1;cFr++) // its FrameNum plus 1 to switch the last frame off
                {
                        Mprintf(4,"Frame: %d(%d) Seq %d(%d) Stim #%d ID%d %d ",cFr,SeqFrameNum,cSt,SeqNum,StimNr,StimSeqIndex[StimNr],StimOffFrameNr[cSt]);

                        // switch stimuli ON&OFF
                        if (cFr==StimOnFrameNr[cSt])
                        {
                                //Gon_off(StimTestScreen[StimSeqIndex[StimNr]-1],ON);
								Gon_off(Stimulus,ON);
                        }
                        if (cFr==StimOffFrameNr[cSt])
                        {
                                //Gon_off(StimTestScreen[StimSeqIndex[StimNr]-1],OFF);
								Gon_off(Stimulus,OFF);
                        }
                        if ((cSt+1<SeqNum)&&(cFr==StimOnFrameNr[cSt+1]))
                        {
                               // GmoveABS(StimTestScreen[StimSeqIndex[StimNr+1]-1],StimPosX[StimSeqIndex[StimNr+1]-1],StimPosY[StimSeqIndex[StimNr+1]-1]);
                               // Gon_off(StimTestScreen[StimSeqIndex[StimNr+1]-1],ON);
								GmoveABS(Stimulus,StimPosX[StimSeqIndex[StimNr+1]-1],StimPosY[StimSeqIndex[StimNr+1]-1]);
								Gon_off(Stimulus,ON);
                        }
                        
                        //------------------------
                        // GmoveABS(StimTestScreen[StimSeqIndex[StimNr]-1],StimPosX[StimSeqIndex[StimNr]-1],StimPosY[StimSeqIndex[StimNr]-1]);
						GmoveABS(Stimulus,StimPosX[StimSeqIndex[StimNr]-1],StimPosY[StimSeqIndex[StimNr]-1]);
                        Gflush(1);
                        //------------------------
                        
                        // send events
                        if ((cFr==StimOnFrameNr[cSt]) || ((cSt+1<SeqNum)&&(cFr==StimOnFrameNr[cSt+1])))
                        {
                                encode(TURN_TEST0_ON);
                                SendByteA(NLX_STIM_ON);
                        }
                        else if (((cSt+1<SeqNum)&&(cFr==StimOffFrameNr[cSt])&&(cFr!=StimOnFrameNr[cSt+1])) || ((cSt+1==SeqNum)&&(cFr==StimOffFrameNr[cSt])))
                        {
                                encode(TURN_TEST0_OFF);
                                SendByteA(NLX_STIM_OFF);
                        }
                        else
                        {
                                SendByteA(0);
                        }
                        
                                
                        if (cFr==StimOffFrameNr[cSt])
                        {
                                cSt++;
                                StimNr++;
                        }
                        if (cSt==SeqNum){break;}

                        // check behaviour
                        if (get_fixation_state() == 0)
                        {
                                break_fixation_error ();
                                SCREENdraw_fixwin (RED);
                                error_flag = 1;
                                terminate_flag = 1;
                                break;
                        }
                        if (get_bar_state() == 0)
                        {
                                response_no_bar_down(0);
                                terminate_flag=1;
                                missed_flag = 1;
                                break;
                        }
                }
        }
        
        //---------------------------------------------------------------------------------------------------------
        //                                           FINISH TRIAL
        //---------------------------------------------------------------------------------------------------------

        Gon_off(FIXSPOT,OFF);
        Gon_off(TEST0,OFF);
        Gon_off(TEST1,OFF);
        Gon_off(TEST2,OFF);
        Gon_off(TEST3,OFF);
        Gon_off(TEST4,OFF);
        Gon_off(TEST5,OFF);
        Gon_off(TEST6,OFF);

        Gflush(1);
        SendByteA_plus(NLX_SUBJECT_END,5);
        Mprintf(5,"FINISH trial");
        
        SCREENdraw_fixwin (BLACK);

        update_histogram();
        collect_data (OFF);
        display_trial_progress(OFF);
        end_trial();
        put_eye_data_in_buf(OFF);

        encode(END_EYE_DATA);
        SendByteA_plus(NLX_RECORD_END,5);

        //---------------------------------------------------------------------------------------------------------
        //inter trial
        encode(START_INTER_TRIAL);

        //---------------------------------------------------------------------------------------------------------
        //reward in case of a correct executed trial
        if ((esc_flag==0) && (error_flag==0) && (terminate_flag==0))
        {
                NumHits++;
                response_correct(0);
//              GiveRewPulse(rewpulse_num, rewpulse_time);
                GiveRewPulseCrist(rewpulse_num+2);
                
                // send parameter to neuralynx
                SendByteA_plus(NLX_STIMPARAM_START,5);
                SendByteA_plus(SEQUENCE_OVERLAP+SeqNum+3,5);// number of send parameters
                SendByteA_plus(SEQUENCE_OVERLAP+1,5);// start index (1..n) of actual segement
                SendByteA_plus(SeqNum,5);// number of segment elements
                for (i=0;i<SeqNum;i++)
                {SendByteA_plus(StimSeqIndex[StimNr-SeqNum+i],5);}// just send number in sequence numbers between 1-255
                SendByteA_plus(NLX_STIMPARAM_END,5);
                SendByteA_plus(NLX_STIMPARAM_END,5);
                SendByteA_plus(NLX_READ_DATA,5);
                
                // update STIM
                writeCndArray(STIM_SEQ_FILE,StimNum,StimSeqIndex,StimNr);
                Mprintf(5,"StimNr %d ",StimNr);
        }
        display_eye_path(OFF);
        encode(END_INTER_TRIAL);
        SendByteA_plus(NLX_TRIAL_END,5);
        return;
        
}

//##########################################################################################################

#include "AL_INCL/AL_FUN.STT"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     
