//  simple fixation task

//##########################################################################################################
//include files
#include "css_inc.h"
#include "AL_INCL/AL_PARAM.STT"
#include "AL_INCL/AL_CODES.STT"
#include "AL_INCL/AT_CODES.STT"

// task parameter
#define GRID_ROWS              3    //number of conditions = Rows* Rows    
#define GRID_RING              9    //should be equal to number of conditions 
#define TARGET_OFF_RGB_1        150
#define TARGET_OFF_RGB_2        120

// MicroStimulatino
#define PRE_MICROSTIM_TIME_MIN	50 //
#define PRE_MICROSTIM_TIME_MAX	200 //
#define MICRO_STIMULATION_PROB  0.4  // Propability that on any given trial a microstimulation occurs


//  Times
#define FIX_WAIT_TIME         5000
#define PRE_TARGET_TIME       300
#define TARGET_ON_TIME        550
#define MEMORY_SHORT          1500
#define MEMORY_MIN	800
#define MEMORY_MAX	1000
//#define MEMORY_LONG           1250
#define SACC_REACTION_MIN          100
#define SACC_REACTION_MAX          2000
#define SACC_DURATION          200
#define FIX_TARGET_TIME        	200
#define TARGET_REAPPEARENCE_DELAY	50
#define INTERTRIAL             100
#define PENALTY_TIME           100
 
// Timers
#define FIX_WAIT_TIMER		1
#define PRE_TARGET_TIMER	2
#define TARGET_ON_TIMER     3
#define MEMORY_TIMER    4
#define INTERTRIALTIMER		5
#define FIXCHECK_TIMER		6
#define GAMBLEGAZE_TIMER	7
#define SACC_REACTION_TIMER	8
#define SACC_DURATION_TIMER 9
#define FIX_TARGET_TIMER	10
#define PRE_MICRO_STIM_STIMER   11 

// filenames
#define RF_PARAM_FILE  "PAR.txt"

// functions
#include "AL_INCL\AL_FDEC.STT"

//##########################################################################################################
main()
{
	int intertrialinterval;
	int index, i, j;
	int rewpulse_num;
	int rewtime;
	int GambleCode;
	float TarPos_X, TarPos_Y, Fix_X, Fix_Y, RF_X, RF_Y;
	int CurrentBlock,CurrentCondition,CurrStimulusNr;
	float Grid_X[GRID_ROWS*GRID_ROWS];
	float Grid_Y[GRID_ROWS*GRID_ROWS];
	int GridRowNr, GridColNr;
	long MemoryTime;
	int SaccReactionTime;
	int TargetLutIndex;
        int MaxCondNum;
        int MaxBlockNum;
	float RFr,RFtheta,Tartheta;
	int RING_STIM;
	float RingSpacing,TARGET_FIXWIN,GRID_SPACING;
	int PreMicroStimTime,MicroStimulationFlag,MicroStimOccured,Indicator;
	float rnd_num;
	//====================================================
	// initialise neuralynx receive
	Config_SETUP1();
	SendByteA_plus(0,5);
	encode(START_PRE_TRIAL);
	SendByteA_plus(NLX_TRIAL_START,5);
	//====================================================
	
	//________________________________________________________________
	// initialise flags
	error_flag = 0;
	esc_flag = 0;
	terminate_flag = 0;
	MicroStimulationFlag=0;
	MicroStimOccured=0;
	Indicator=0;

	//________________________________________________________________
	// read param file
	Fix_X = readPARAM(RF_PARAM_FILE,"FIX_x");
	Fix_Y = readPARAM(RF_PARAM_FILE,"FIX_y");
	RF_X = readPARAM(RF_PARAM_FILE,"RF_x");
	RF_Y = readPARAM(RF_PARAM_FILE,"RF_y");
	RF_X =  Fix_X+RF_X;
	RF_Y = Fix_Y+RF_Y;
	RING_STIM = readPARAM(RF_PARAM_FILE,"RingStim"); 
	TARGET_FIXWIN = readPARAM(RF_PARAM_FILE,"TARGETFIXWIN");  
	GRID_SPACING  = readPARAM(RF_PARAM_FILE,"GRIDSPACING");  
	//________________________________________________________________
	// BLOCK info
        MaxBlockNum = BLOCKget_max_vals(&MaxCondNum);
	CurrentBlock = BLOCKget_block_num();
	CurrentCondition = BLOCKget_cond_num();
//        if (CurrentCondition>MaxCondNum/2)
//        {       CurrStimulusNr = CurrentCondition-MaxCondNum/2;}
//        else
//        {       CurrStimulusNr = CurrentCondition;}
        CurrStimulusNr = CurrentCondition;
	
	//________________________________________________________________
	// calculate target positions on a grid
	for (i=0;i<GRID_ROWS*GRID_ROWS;i++)
	{
		if (GridRowNr==GRID_ROWS)
		{GridRowNr=0;GridColNr++;}
		Grid_X[i] = GRID_SPACING*(float)GridColNr - ((float)GRID_ROWS-1.0)*GRID_SPACING/2.0 + RF_X;
		Grid_Y[i] = -1.0*GRID_SPACING*(float)GridRowNr + ((float)GRID_ROWS-1.0)*GRID_SPACING/2.0 + RF_Y;
		GridRowNr++;
	}
	TarPos_X = Grid_X[CurrStimulusNr-1];
	TarPos_Y = Grid_Y[CurrStimulusNr-1];
	





	//________________________________________________________________
	// calculate target positions 
	// version for 4 conditions, same ecc, separated by 90deg
	if (RING_STIM == 1)
	{
	RingSpacing = 360 / GRID_RING;


	RFr = cart2r(RF_X-Fix_X,RF_Y-Fix_X);
	RFtheta = cart2theta(RF_X-Fix_X,RF_Y-Fix_X);
	Tartheta = RFtheta+(CurrentCondition-1)*RingSpacing;
	TarPos_X = polar2x(RFr,Tartheta);
	TarPos_Y = polar2y(RFr,Tartheta);
	TarPos_X = Fix_X+TarPos_X;
	TarPos_Y = Fix_Y+TarPos_Y;
	}
	//________________________________________________________________
	// initiate graphic stuff
//        load_CLT(1);
	TargetLutIndex = ITEM_POSlut_index(TEST1,1);
	GcolorABS(TargetLutIndex,0,0,0);
	Gon_off(FIXSPOT,OFF);
	Gon_off(TEST1,OFF);
	GmoveABS(FIXSPOT,Fix_X,Fix_Y);
	GmoveABS(TEST1,TarPos_X,TarPos_Y);
	Gflush(1);

	//________________________________________________________________
	// calc memory time
// 	if (random(0,2)==1)
// 	{		MemoryTime = MEMORY_SHORT;}
// 	else
// 	{		MemoryTime = MEMORY_LONG;}
//        if (CurrentCondition>16)
//        {               MemoryTime = MEMORY_LONG;}
//        else
//        {               MemoryTime = MEMORY_SHORT;}
        MemoryTime = MEMORY_SHORT;
	MemoryTime = random(MEMORY_MIN,MEMORY_MAX+1);
	PreMicroStimTime = random (PRE_MICROSTIM_TIME_MIN,PRE_MICROSTIM_TIME_MAX+1);
	//________________________________________________________________
	// get reward parameter
//        GetRewTime_STARSKY_Setup3(&rewtime);
        GetRewNum_STARSKY_Setup_1(&rewpulse_num);
	rewtime = 0;
	//________________________________________________________________
	
	/// MicroStim
	rnd_num = ((float)random(1,101));
	if (rnd_num <= ((MICRO_STIMULATION_PROB*100)))
		{
		MicroStimulationFlag =1;
	}	
	
	
	// message board
	Mprintf(1,"hits#: %d REW: %d nextRew:%dx%d",NumHits,NumRew,rewpulse_num,rewtime);
	Mprintf(2,"Fix [%2.2f,%2.2f] Tar [%2.2f,%2.2f] MemT %d", Fix_X,Fix_Y,TarPos_X-Fix_X,TarPos_Y-Fix_Y,MemoryTime);
        Mprintf(3,"%d %d %d",MaxCondNum,MaxBlockNum,CurrStimulusNr);
	Mprintf(4,"MStim: %d rnd:%f",MicroStimulationFlag,rnd_num);
	Mprintf(5,"");

	//________________________________________________________________
	// send trial parameter
	encode(TRIALPARAM_START);
	encode(PARAMBASE+ (int) (Fix_X*100));
	encode(PARAMBASE+ (int) (Fix_Y*100));
	encode(PARAMBASE+ (int) (TarPos_X*100));
	encode(PARAMBASE+ (int) (TarPos_Y*100));
	encode(PARAMBASE+ (int) MicroStimulationFlag);
	encode(TRIALPARAM_START);

	SendByteA_plus(NLX_TRIALPARAM_START,5);
	SendByteA_plus(CurrentBlock,5);
	SendByteA_plus(CurrentCondition,5);
//        SendByteA_plus(CurrentCondition,5);
	SendByteA_plus(NLX_TRIALPARAM_END,5);

	//________________________________________________________________
	encode(END_PRE_TRIAL);

	//________________________________________________________________
	// prepare CORTEX display
	clear_eog(); 
	display_eye_path(ON);
	SCREENdraw_fixwin (BLACK);

	// prepare recording
	//====================================================

	//---------------------------------------------------------------------------------------------------------
	//                                           START TRIAL
	//---------------------------------------------------------------------------------------------------------
	
	/////////////////////
	// Wait for the bar
	/////////////////////
	while ((get_bar_state() == 0) && (esc_flag==0) && (terminate_flag==0))
	{	
		esc_flag = KEY_action1();
	}

	start_trial (20);
	collect_data (ON);
	display_histogram();
	display_trial_progress(ON);
	put_eye_data_in_buf(1);
	put_epp_data_in_buf(1);
	encode(START_EYE_DATA);

	if (get_bar_state() == 1)
	{
		SendByteA_plus(NLX_RECORD_START,5);
		Gon_off(FIXSPOT,ON);
		Gflush(1);
		encode(TURN_FIXSPOT_ON);
	}

	/////////////////////
	//wait for FIXATION//
	/////////////////////
	MS_TIMERset(FIX_WAIT_TIMER,(long) FIX_WAIT_TIME);
	while ((MS_TIMERcheck(FIX_WAIT_TIMER) > 0) && (esc_flag==0) && (terminate_flag==0))
	{   
		esc_flag = KEY_action1();

		SCREENdraw_fixwin (DARKGRAY);
		if(get_fixation_state() == 1)
		{
			terminate_flag = 0;
			//====================================================
			encode(FIXATION_OCCURS);
			SendByteA(NLX_SUBJECT_START);
			//====================================================
			break;
		}
		
		if (get_bar_state() == 0)
		{
                        response_no_bar_down(0);
			terminate_flag=1;
			error_flag = 1;
			break;
		}
			
	}
	////////////////////////////
	// pre target presentation//
	////////////////////////////
	MS_TIMERset(PRE_TARGET_TIMER,(long) PRE_TARGET_TIME);
	while ((MS_TIMERcheck(PRE_TARGET_TIMER) > 0) && (esc_flag==0) && (terminate_flag == 0))
	{   
		esc_flag = KEY_action1();

		if (FixCheck(FIXCHECK_TIMER,MAX_BREAK_FIX_TIME,&breakfix_flag) == 1)
		{
			break_fixation_error ();
			SCREENdraw_fixwin (RED);
			error_flag = 1;
			terminate_flag = 1;
			break;
		}
		if (get_bar_state() == 0)
		{
                        response_no_bar_down(0);
			terminate_flag=1;
			error_flag = 1;
			break;
		}
	}
	
	/////////////////////////////
	// fixation while target on//
	/////////////////////////////
	if ((esc_flag==0) && (terminate_flag == 0))
	{
		Gon_off(FIXSPOT,ON);
		Gon_off(TEST1,ON);
		Gflush(1);

		//------------------------------
		encode(STIM_ON);
		SendByteA_plus(NLX_STIM_ON,5);
		//------------------------------
		
		MS_TIMERset(TARGET_ON_TIMER,TARGET_ON_TIME);
		while ((MS_TIMERcheck(TARGET_ON_TIMER) > 0) && (esc_flag==0) && (terminate_flag == 0))
		{   
			esc_flag = KEY_action1();
			ITEM_POSmark_pos(TEST1,1,WHITE);
	
			if (FixCheck(FIXCHECK_TIMER,MAX_BREAK_FIX_TIME,&breakfix_flag) == 1)
			{
				break_fixation_error ();
				SCREENdraw_fixwin (RED);
				error_flag = 1;
				terminate_flag = 1;
				break;
			}
			if (get_bar_state() == 0)
			{
                                response_no_bar_down(0);
				terminate_flag=1;
				error_flag = 1;
				break;
			}
		}		
	}
	/////////////////////////////
	// fixation while target off//
	/////////////////////////////
	if ((esc_flag==0) && (terminate_flag == 0))
	{
		Gon_off(FIXSPOT,ON);
		Gon_off(TEST1,ON);
                GcolorABS(TargetLutIndex,TARGET_OFF_RGB_1,TARGET_OFF_RGB_1,TARGET_OFF_RGB_1);
		Gflush(1);
		ITEM_POSmark_pos(TEST1,1,DARKGRAY);
		//------------------------------
		encode(STIM_ON);
		SendByteA_plus(NLX_STIM_OFF,5);
		//------------------------------
		MS_TIMERset(MEMORY_TIMER,MemoryTime);
		MS_TIMERset(PRE_MICRO_STIM_STIMER,PreMicroStimTime);
		while ((MS_TIMERcheck(MEMORY_TIMER) > 0) && (esc_flag==0) && (terminate_flag == 0))
		{   
			esc_flag = KEY_action1();
	
			if ((MS_TIMERcheck(PRE_MICRO_STIM_STIMER) == 0) && (MicroStimulationFlag == 1) && (MicroStimOccured==0))
				{
					DEVoutp(DIOBOARDNR,2,64);
					SendByteB(1);
					encode(MICRO_STIM);
					SendByteA(NLX_MICRO_STIM);
					MicroStimOccured=1;
					//Indicator++;
					Mprintf(5,"StimOccured :%d",MicroStimOccured);
					//DEVoutp(DIOBOARDNR,2,0);
				}
			
			
			
			if (FixCheck(FIXCHECK_TIMER,MAX_BREAK_FIX_TIME,&breakfix_flag) == 1)
			{
				break_fixation_error ();
				SCREENdraw_fixwin (RED);
				error_flag = 1;
				terminate_flag = 1;
				break;
			}
	        if (get_bar_state() == 0)
			{
                                response_no_bar_down(0);
				terminate_flag=1;
				error_flag = 1;
				break;
			}
		}		
	}

	///////////////////////////////////
	// Fixation off, wait for saccade//
	///////////////////////////////////
	if ((esc_flag==0) && (terminate_flag == 0))
	{
		Gon_off(FIXSPOT,OFF);
		Gflush(1);
		//------------------------------
		encode(FIXSPOT_OFF);
		SendByteA_plus(NLX_FIXSPOT_OFF,5);
		//------------------------------
		MS_TIMERset(SACC_REACTION_TIMER,(long) SACC_REACTION_MAX);
		while ((MS_TIMERcheck(SACC_REACTION_TIMER) > 0) && (esc_flag==0) && (terminate_flag == 0))
		{   
			esc_flag = KEY_action1();
			SaccReactionTime = SACC_REACTION_MAX - MS_TIMERcheck(SACC_REACTION_TIMER);
			Mprintf(3,"RT %d",SaccReactionTime);

			if (get_fixation_state()==1) 
			{ missed_flag=1;}
                        else if ((get_fixation_state()==0) && (SaccReactionTime>SACC_REACTION_MIN))
			{
				encode(SACCADE_ONSET);
				SendByteA_plus(NLX_SACCADE_START,5);
				missed_flag=0;
					SCREENdraw_fixwin (BLACK);
				break;
			}
                        else if ((get_fixation_state()==0) && (SaccReactionTime<=SACC_REACTION_MIN))
			{
				encode(SACCADE_ONSET);
				SendByteA_plus(NLX_SACCADE_START,5);
                                response_early(15);
				missed_flag=0;
			  	error_flag = 1;
				terminate_flag = 1;
				break;
			}
				
			if (get_bar_state() == 0)
			{
                                response_no_bar_down(0);
				terminate_flag=1;
				error_flag = 1;
				break;
			}
		}		
	}
	if (missed_flag==1)
	{
                response_missing(0);
                error_flag = 1;
                terminate_flag = 1;
	}
	
	///////////////////////////////////
	// During Saccade//
	///////////////////////////////////
	if ((esc_flag==0) && (terminate_flag == 0))
	{
		Mprintf(4,"Saccade allowance");
//	        GcolorABS(TargetLutIndex,TARGET_OFF_RGB_2,TARGET_OFF_RGB_2,TARGET_OFF_RGB_2);
//		Gflush(1);
		MS_TIMERset(SACC_DURATION_TIMER,(long) SACC_DURATION);
		while (MS_TIMERcheck(SACC_DURATION_TIMER) > 0);
		{
			ITEM_POSmark_pos(TEST0,1,WHITE);
		}
	}
	
	/////////////////////////////
	// fixation while target off//
	/////////////////////////////
// 	Mprintf(3,"%d%d%d",esc_flag,terminate_flag,error_flag);
	if ((esc_flag==0) && (terminate_flag == 0))
	{
		//------------------------------
                encode(FIXATION_OCCURS);
                SendByteA_plus(NLX_EVENT_3,5);
		//------------------------------
		MS_TIMERset(FIX_TARGET_TIMER,FIX_TARGET_TIME);
		while ((MS_TIMERcheck(FIX_TARGET_TIMER) > 0) && (esc_flag==0) && (terminate_flag == 0))
		{   
			esc_flag = KEY_action1();
			DrawBox(TarPos_X,TarPos_Y,TARGET_FIXWIN,TARGET_FIXWIN,LIGHTBLUE);
			Mprintf(4,"Fixation control %d",ITEM_POSeye_iswithin(TEST1,1,TARGET_FIXWIN,TARGET_FIXWIN));
			
			if (TARGET_REAPPEARENCE_DELAY<FIX_TARGET_TIME-MS_TIMERcheck(FIX_TARGET_TIMER))
			{
	        		GcolorABS(TargetLutIndex,TARGET_OFF_RGB_2,TARGET_OFF_RGB_2,TARGET_OFF_RGB_2);
				Gflush(1);
				ITEM_POSmark_pos(TEST1,1,LIGHTGRAY);
			}
				
			if (ITEM_POSeye_iswithin(TEST1,1,TARGET_FIXWIN,TARGET_FIXWIN)==0)
			{
				break_fixation_error ();
				error_flag = 1;
				terminate_flag = 1;
	        		GcolorABS(TargetLutIndex,0,0,0);
				Gflush(1);
				set_timer(200);
				while(timer_expired() == 0);
				break;
			}
			
			if (get_bar_state() == 0)
			{
                                response_no_bar_down(0);
				terminate_flag=1;
				error_flag = 1;
				break;
			}
		}		
	}
	
	//---------------------------------------------------------------------------------------------------------
	// FINISH TRIAL
	//---------------------------------------------------------------------------------------------------------

	encode(START_POST_TRIAL);
	SendByteA_plus(NLX_SUBJECT_END,5);
	Gon_off(FIXSPOT,OFF);
	Gon_off(TEST1,OFF);
	Gflush(1);
	encode(TURN_FIXSPOT_OFF);

	SCREENdraw_fixwin (BLACK);
	collect_data (OFF);
	display_trial_progress(OFF);

	//________________________________________________________________
	//reward in case of a correct executed trial
	if ((esc_flag==0) && (error_flag==0) && (terminate_flag==0))
	{
		NumHits++;
		readdata_flag = 1;
		response_correct(0);
		encode(REWARD);
//		GiveRewPulse(rewpulse_num,rewtime);
		GiveRewPulseCrist(rewpulse_num);
		set_timer(INTERTRIAL);
		while(timer_expired() == 0);
	}
	else if ((error_flag==1)&&(missed_flag==1))
	{
		set_timer(INTERTRIAL);
		while(timer_expired() == 0);
	}
	else if ((error_flag==0)&&(missed_flag==1))
	{
		set_timer(INTERTRIAL+PENALTY_TIME);
		while(timer_expired() == 0);
	}

	put_eye_data_in_buf(OFF);
	put_epp_data_in_buf(OFF);
	encode(END_EYE_DATA);
	display_eye_path(OFF);

	//====================================================
	SendByteA_plus(NLX_RECORD_END,5);
	if (readdata_flag==1){SendByteA_plus(NLX_READ_DATA,5);}
	SendByteA_plus(NLX_TRIAL_END,5);
	//====================================================
	end_trial();
	return;
}


/********************************************/
/****  Functions used in the main block  ****/
/********************************************/
#include "AL_INCL/AL_FUN.STT"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
